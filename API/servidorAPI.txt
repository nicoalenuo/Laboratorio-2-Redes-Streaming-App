const ServerIP = sys.argv[1] //Aca se aceptan conexiones de control tcp
const ServerPort = sys.argv[2]

//Por ejemplo, ServerIP = 127.0.0.1 y ServerPort = 2023

const SourceIP = 127.0.0.1 //Aca se recibir치n los datagramas a reenviar
const SourcePort = 65534 

sktStream = socket.udp() //Por este socket se recibir치n los datagramas a reenviar
sktStream.bind(SourceIP, SourcePort)

sktEnvio = socket.upd() //Por este socket se reenviar치n los datagramas a todos los clientes que esten conectados (y no hayan interrumpido)

sktC = socket.tcp() //Por este socket se recibir치n los mensajes de control (conectar, interrumpir, etc)
sktC.bind(ServerIP, ServerPort)
sktControl = sktC.listen()
sktControl.setTimeout(-1) //Bloqueante

clientes = list<(int, int)> //Lista global de la forma ip, puerto, tales que hay que enviar los datagramas recibidos

semaforoMutex = Semaphore(1) //se inicializa el semaforo en 1

//Comienza el main _____________________________________________________________________________________________________

thread.new(aceptarConexiones, sktControl) //Para aceptar conexiones de control sin detener el stream
while(true):
    datagrama = sktStream.receive()
    for (ipCliente, puertoCliente) in clientes:
        sktEnvio.sendto(datagrama, ipCliente, puertoCliente)

//_____________________________________________________________________________________________________

enviar_cliente(respuesta, cliente){ //Funcion auxiliar que nos ayuda a no repetir codigo
    repeat
        respuesta, err = cliente.send(respuesta)
        if err:
            cliente.close()
            return
    until (respuesta = '')
}

//________________________________________________________________________________________________________________

aceptarConexiones(sktControl){
    while (true):
        cliente, err = sktControl.accept() //Bloqueante
        if (err != 'failure'):
            thread.new(aceptarControl, cliente)
}

//_____________________________________________________________________________________________________

aceptarControl(cliente):
    cliente.setTimeout(-1) //Bloqueante
    desconectar = false
    ipCliente, puertoClinte = nil
    conectado = false

    while (!desconectar):
        buffer = ''
        comando = ''
        
        repeat
            buffer, err = cliente.receive()
            comando = comando + buffer
        until find(comando, '\n') or (err == 'closed')
        
        if (err != 'closed')
            comando = split(comando, '\n') //Si la entrada es aaa\n, se devuelve aaa

        if (!conectado and comando.match(r'^CONECTAR \d{1,5}$')):
            ipCliente = cliente.getPeer()
            puertoCliente = split(comando, ' ')
            conectado = true
            
            P(semaforoMutex)
            if (ipCliente, puertoCliente) not in clientes:
                clientes.add((ipCliente,puertoCliente))
            V(semaforoMutex)

            enviar_cliente("OK\n", cliente)
        
        else if (comando == 'INTERRUMPIR'):
            P(semaforoMutex)
            if (ipCliente, puertoCliente) in clientes:
                clientes.remove((ipCliente,puertoCliente))
            V(semaforoMutex)

            enviar_cliente("OK\n", cliente)
        
        else if (comando == 'CONTINUAR'):
            P(semaforoMutex)
            if (ipCliente, puertoCliente) not in clientes:
                clientes.add((ipCliente,puertoCliente))
            V(semaforoMutex)
            
            enviar_cliente("OK\n", cliente)

        else if (err == 'closed' or comando == 'DESCONECTAR')
            P(semaforoMutex)
            if (ipCliente, puertoCliente) in clientes:
                clientes.remove((ipCliente,puertoCliente))
            V(semaforoMutex)

            enviar_cliente("OK\n", cliente)
            cliente.close()
            desconectar = true

        //Notar que los comandos no validos se ignoran
        //y los fuera de orden no provocan ningun error o cambio